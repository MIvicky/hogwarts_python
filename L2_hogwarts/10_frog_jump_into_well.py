#【练习】青蛙跳井

# 知识点
# 类和对象
# 递归
# 封装

# 作业要求
# 编写一个Python程序:青蛙跳台阶，共有10阶台阶，青蛙每次可以选择跳一阶或者两阶，
# 问：青蛙跳上这10个台阶共有多少种跳法。

# 解题思路
# 我们可以发现，跳上第 n 个台阶的跳法数只与跳上前两个台阶的跳法数有关。如果我们知道了跳上第 n-1 个台阶和跳上第 n-2 个台阶的跳法数，就可以得到跳上第 n 个台阶的跳法数。
# 特殊情况下，当只有 1 个台阶时，只有一种跳法；当有 2 个台阶时，有两种跳法。
# 因此，我们可以使用递归的方式解决这个问题。递归的终止条件是当台阶数为 1 或 2 时，直接返回相应的值。
# 在递归的过程中，通过递归调用 jump 方法计算跳上前两个台阶的跳法数，并将结果相加得到跳上第 n 个台阶的跳法数。
# 为了避免重复计算，我们可以使用一个字典来记录已经计算过的结果，每次先检查字典中是否已经计算过当前台阶的跳法数。如果有，则直接返回对应的结果，否则进行计算并保存到字典中。
# 这样，通过递归调用和记录已计算结果的方法，我们可以得到青蛙跳上任意数量的台阶的跳法数。

# 总台阶 | 跳法                                   | 跳法数
# 1     | 1                                     | 1
# 2     | 1+1 / 2                               | 2
# 3     | 1+1+1 / 1+2 / 2+1                     | 3
# 4     | 1+1+1+1 / 1+1+2 / 1+2+1 / 2+1+1 / 2+2 | 5
# 5     | 1+1+1+1+1 / 1+1+1+2 / 1+1+2+1 / 1+2+1+1 / 1+2+2 / 2+1+1+1 / 2+1+2 / 2+2+1 | 8
# ...
# 结论：f(1)=1, f(2)=2, f(3)=f(1)+f(2)=1+2=3, f(4)=f(2)+f(3)=2+3=5, f(5)=f(3)+f(4)=3+5=8
# 即：f(n) = f(n-1) + f(n-2), n>2; f(1)=1, f(2)=2.

class FlogJump:
    def __init__(self):
        # 定义一个字典来保存记录每种台阶数对应的跳法有多少，key为台阶数，value为跳法数
        # 台阶数为1时，有1种跳法；台阶数为2时，有2种跳法：1+1 / 2
        self.steps_ways = {1:1, 2:2}

    # 计算台阶数对应的跳法数，n表示台阶数
    def jump(self, n):
        # 如果不使用字典
        # 递归的基本情况、终止条件
        # if n == 1 or n == 2:
        #     return n
        #
        # return self.jump(n-1) + self.jump(n-2)

        # 如果使用字典
        # 如果字典中已保存当前台阶数对应的跳法数，则可以直接使用；否则需要递归进行计算
        if n in self.steps_ways:
            return self.steps_ways[n]
        else:
            self.steps_ways[n] = self.jump(n-1) + self.jump(n-2)
            return self.steps_ways[n]

my_flog_jump = FlogJump()
print(f"青蛙跳台阶，共有5阶台阶，青蛙每次可以选择跳一阶或者两阶，共有 {my_flog_jump.jump(5)} 种跳法")
# 青蛙跳台阶，共有5阶台阶，青蛙每次可以选择跳一阶或者两阶，共有 8 种跳法
print(f"青蛙跳台阶，共有10阶台阶，青蛙每次可以选择跳一阶或者两阶，共有 {my_flog_jump.jump(10)} 种跳法")
# 青蛙跳台阶，共有10阶台阶，青蛙每次可以选择跳一阶或者两阶，共有 89 种跳法